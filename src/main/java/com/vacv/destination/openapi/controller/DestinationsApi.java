/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.3.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.vacv.destination.openapi.controller;

import com.vacv.destination.openapi.dto.DestinationDto;
import com.vacv.destination.openapi.dto.PatchDestinationDto;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-05-29T21:23:49.070811800-04:00[America/Toronto]")
@Tag(name = "destinations", description = "the destinations API")
public interface DestinationsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * DELETE /destinations/{code} : Delete a Destination
     *
     * @param code Destination code (required)
     * @return No Content (status code 204)
     *         or Not Found (status code 404)
     */
    @Operation(
        operationId = "destinationsCodeDelete",
        summary = "Delete a Destination",
        responses = {
            @ApiResponse(responseCode = "204", description = "No Content"),
            @ApiResponse(responseCode = "404", description = "Not Found")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/destinations/{code}"
    )
    default ResponseEntity<Void> destinationsCodeDelete(
        @Parameter(name = "code", description = "Destination code", required = true, in = ParameterIn.PATH) @PathVariable("code") String code
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /destinations/{code} : Get destination by code
     *
     * @param code Destination Code (required)
     * @return OK (status code 200)
     *         or Not Found (status code 404)
     */
    @Operation(
        operationId = "destinationsCodeGet",
        summary = "Get destination by code",
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = DestinationDto.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not Found")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/destinations/{code}",
        produces = { "application/json" }
    )
    default ResponseEntity<DestinationDto> destinationsCodeGet(
        @Parameter(name = "code", description = "Destination Code", required = true, in = ParameterIn.PATH) @PathVariable("code") String code
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : \"M001\", \"name\" : \"Montreal\", \"hotelCodes\" : [ \"H001\", \"H002\" ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PATCH /destinations/{code} : Update the code of a destination by ID
     *
     * @param code Destination Code (required)
     * @param patchDestinationDto  (required)
     * @return OK (status code 200)
     *         or Not Found (status code 404)
     */
    @Operation(
        operationId = "destinationsCodePatch",
        summary = "Update the code of a destination by ID",
        responses = {
            @ApiResponse(responseCode = "200", description = "OK"),
            @ApiResponse(responseCode = "404", description = "Not Found")
        }
    )
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/destinations/{code}",
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> destinationsCodePatch(
        @Parameter(name = "code", description = "Destination Code", required = true, in = ParameterIn.PATH) @PathVariable("code") String code,
        @Parameter(name = "PatchDestinationDto", description = "", required = true) @RequestBody PatchDestinationDto patchDestinationDto
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /destinations : Get all destinations
     *
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "destinationsGet",
        summary = "Get all destinations",
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = DestinationDto.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/destinations",
        produces = { "application/json" }
    )
    default ResponseEntity<List<DestinationDto>> destinationsGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"code\" : \"M001\", \"name\" : \"Montreal\", \"hotelCodes\" : [ \"H001\", \"H002\" ] }, { \"code\" : \"M001\", \"name\" : \"Montreal\", \"hotelCodes\" : [ \"H001\", \"H002\" ] } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
